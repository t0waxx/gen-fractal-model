import type { Face, FractalType } from '../types';

// THREE.Vector3 should be available globally via types.ts
// No need for specific `type ThreeVector3 = THREE.Vector3;` alias here if THREE is globally typed.

export function exportToObjFile(
  fractalType: FractalType,
  level: number,
  size: number,
  vertices: THREE.Vector3[], // Use THREE.Vector3 directly
  faces: Face[]
): void {
  if (!vertices.length || !faces.length) {
    console.error("No data to export.");
    return;
  }

  let objContent = `# ${fractalType}\n`;
  objContent += `# Generated by 3D Fractal Explorer (React Edition)\n`;
  objContent += `# Level: ${level}, Size: ${size.toFixed(1)}\n`;
  objContent += `# Vertices: ${vertices.length}\n`;
  objContent += `# Faces: ${faces.length}\n\n`;

  for (let i = 0; i < vertices.length; i++) {
    const v = vertices[i];
    objContent += `v ${v.x.toFixed(6)} ${v.y.toFixed(6)} ${v.z.toFixed(6)}\n`;
  }
  objContent += "\n";
  for (let i = 0; i < faces.length; i++) {
    const face = faces[i];
    objContent += `f ${face.v1 + 1} ${face.v2 + 1} ${face.v3 + 1}\n`;
  }

  const blob = new Blob([objContent], { type: 'text/plain;charset=utf-8' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `${fractalType}_level${level}_size${size.toFixed(1)}.obj`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(link.href);
}
